name: 部署会议助手到 Ubuntu 24.04

on:
  push:
    branches: [ main, develop ]  # 在推送到 main 或 develop 分支时触发
  workflow_dispatch: {}  # 支持手动触发部署

jobs:
  deploy:
    name: 通过 SSH 部署
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 部署到远程服务器
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script_stop: true
          script: |
            BRANCH="${{ github.ref_name }}"
            echo "🚩 当前触发分支: $BRANCH"
            cd /var/www/meeting_assistant || exit 1

            echo "🔄 正在从 GitHub 拉取最新代码（分支：$BRANCH）..."
            # 确保本地存在对应分支并切换到它
            git fetch origin "$BRANCH"
            if git show-ref --verify --quiet "refs/heads/$BRANCH"; then
              git checkout "$BRANCH"
            else
              git checkout -b "$BRANCH" "origin/$BRANCH"
            fi
            git pull origin "$BRANCH"

            echo "📦 正在安装/更新 Python 依赖..."
            if [ ! -d "/var/www/meeting_assistant/venv" ]; then
              echo "✨ 未发现 venv，正在创建..."
              python3 -m venv /var/www/meeting_assistant/venv
            fi

            # 升级 pip（使用清华镜像）
            /var/www/meeting_assistant/venv/bin/python -m pip install --upgrade pip \
              -i https://pypi.tuna.tsinghua.edu.cn/simple \
              --trusted-host pypi.tuna.tsinghua.edu.cn

            # 安装依赖（使用清华镜像 + 无缓存）
            /var/www/meeting_assistant/venv/bin/pip install --no-cache-dir -r requirements.txt \
              -i https://pypi.tuna.tsinghua.edu.cn/simple \
              --trusted-host pypi.tuna.tsinghua.edu.cn

            echo "🛑 停止 FastAPI 服务（端口 8000）..."
            PIDS=$(lsof -t -iTCP:8000 -sTCP:LISTEN 2>/dev/null || echo "")
            if [ -n "$PIDS" ]; then
              echo "优雅停止: $PIDS"
              kill -TERM $PIDS || true
              sleep 2
              LEFT=$(lsof -t -iTCP:8000 -sTCP:LISTEN 2>/dev/null || echo "")
              if [ -n "$LEFT" ]; then
                echo "强制停止: $LEFT"
                kill -9 $LEFT || true
              fi
            else
              echo "未找到占用 8000 端口的进程"
            fi

            echo "🚀 正在启动 FastAPI 应用..."
            nohup /var/www/meeting_assistant/venv/bin/python -m uvicorn main:app --host 0.0.0.0 --port 8000 --workers 2 > app.log 2>&1 &
            APP_PID=$!
            echo "✅ FastAPI 已在后台运行，PID: $APP_PID"

            # 等待日志文件生成
            sleep 2

            echo "✅ 部署成功，时间：$(date)"
            if [ -f app.log ]; then
              echo "📄 最近 50 行应用日志："
              tail -n 50 app.log
            else
              echo "⚠️ app.log 尚未生成，但应用已在后台启动。"
            fi
